name: Universal AI Code Review

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master, development ]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better diff analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Run Comprehensive Code Review
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        mkdir -p code-reviews
        python3 - << EOF
        import os
        import requests
        import json
        import traceback
        import subprocess

        def get_changed_files():
            try:
                # For pull requests
                if os.environ.get('GITHUB_EVENT_NAME') == 'pull_request':
                    base = os.environ.get('GITHUB_BASE_REF')
                    cmd = f"git diff --name-only origin/{base}...HEAD"
                else:
                    # For pushes, get last commit's changed files
                    cmd = "git diff-tree --no-commit-id --name-only -r HEAD"
                
                result = subprocess.run(cmd.split(), capture_output=True, text=True)
                return result.stdout.strip().split('\n')
            except Exception as e:
                print(f"Error getting changed files: {str(e)}")
                return []

        def is_source_file(path):
            source_extensions = [
                '.py', '.js', '.jsx', '.ts', '.tsx', 
                '.java', '.cpp', '.c', '.rb', '.go', 
                '.php', '.swift', '.kt', '.rs', 
                '.html', '.css', '.scss', '.lua'
            ]
            return any(path.endswith(ext) for ext in source_extensions)

        def sanitize_markdown(text):
            if not text:
                return ""
            return text.replace('|', '\\|').replace('*', '\\*').replace('_', '\\_')

        def review_code(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code = f.read()
                
                api_key = os.environ["GEMINI_API_KEY"]
                url = f"https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key={api_key}"
                
                headers = {
                    'Content-Type': 'application/json'
                }
                
                prompt = f"""As an expert code reviewer, analyze this code and provide a detailed review. Focus on:

                1. Critical Issues:
                   - Security vulnerabilities
                   - Major bugs
                   - Performance bottlenecks
                   - Memory leaks

                2. Code Quality:
                   - Design patterns
                   - Code organization
                   - Naming conventions
                   - Documentation
                   - Test coverage

                3. Specific Recommendations:
                   - Provide clear, actionable improvements
                   - Include code examples where relevant
                   - Prioritize the changes needed

                File: {os.path.basename(file_path)}

                Code:
                {code}

                Format your response with clear headers and bullet points."""
                
                payload = {
                    "contents": [{
                        "parts": [{
                            "text": prompt
                        }]
                    }],
                    "generationConfig": {
                        "temperature": 0.7,
                        "topK": 40,
                        "topP": 0.95,
                        "maxOutputTokens": 2048,
                    }
                }
                
                response = requests.post(
                    url,
                    headers=headers,
                    json=payload,
                    timeout=300
                )
                
                if response.status_code == 200:
                    response_json = response.json()
                    if 'candidates' in response_json and response_json['candidates']:
                        review_text = response_json['candidates'][0]['content']['parts'][0]['text']
                        return {
                            'fileName': os.path.basename(file_path),
                            'filePath': file_path,
                            'reviewResults': {
                                'comprehensive_review': review_text
                            }
                        }
                    else:
                        print(f"Error: No review generated for {file_path}")
                        return None
                else:
                    print(f"Error reviewing {file_path} (Status {response.status_code}): {response.text}")
                    return None
            except Exception as e:
                print(f"Exception reviewing {file_path}: {traceback.format_exc()}")
                return None

        def generate_markdown_report(reviews):
            try:
                markdown = "# 🤖 AI Code Review Report\n\n"
                
                # Add timestamp
                from datetime import datetime
                markdown += f"Generated on: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n"
                
                markdown += "## 📊 Overview\n\n"
                
                successful_reviews = [r for r in reviews if r]
                markdown += f"**Files Reviewed:** {len(successful_reviews)}\n\n"
                
                if not successful_reviews:
                    markdown += "⚠️ No files were successfully reviewed. Please check the action logs for errors.\n\n"
                    return markdown
                
                markdown += "## 📝 Detailed Reviews\n\n"
                
                for file_review in successful_reviews:
                    filename = file_review.get('fileName', 'Unknown File')
                    filepath = file_review.get('filePath', 'Unknown Path')
                    markdown += f"### 📎 `{filepath}`\n\n"
                    
                    review_results = file_review.get('reviewResults', {})
                    comprehensive_review = review_results.get('comprehensive_review', '')
                    
                    markdown += f"{comprehensive_review}\n\n"
                    markdown += "---\n\n"
                
                return markdown
            except Exception as e:
                print(f"Error generating markdown report: {traceback.format_exc()}")
                return "# ❌ Error Generating Report\nAn error occurred while generating the review report."

        EXCLUDE_DIRS = [
            '.git', 'node_modules', 'dist', 'build', 
            'venv', '.venv', 'env', '.env', 
            'coverage', 'logs', '__pycache__',
            'code-reviews'  # Exclude our own output directory
        ]

        def should_exclude(path):
            return any(exclude in path.split(os.path.sep) for exclude in EXCLUDE_DIRS)

        # Get list of changed files
        changed_files = get_changed_files()
        print(f"Changed files: {changed_files}")
        
        # Review only changed source code files
        reviews = []
        for file_path in changed_files:
            if not os.path.exists(file_path):
                continue
                
            if should_exclude(file_path) or not is_source_file(file_path):
                continue
            
            print(f"Reviewing: {file_path}")
            review = review_code(file_path)
            if review:
                reviews.append(review)

        # Generate comprehensive markdown report
        report = generate_markdown_report(reviews)
        
        with open('code-reviews/comprehensive_review.md', 'w', encoding='utf-8') as f:
            f.write(report)
        
        if not reviews:
            print("No source code files were successfully reviewed.")
        EOF
    
    - name: Commit Review Results
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add code-reviews/comprehensive_review.md || true
        git commit -m "📊 Add AI Code Review Report [skip ci]" || true
        git push || true
