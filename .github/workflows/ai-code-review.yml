name: Universal AI Code Review

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master, development ]

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Create .env File
      run: |
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env
        echo "GEMINI_API_URL=https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateText" >> .env
        echo "REVIEW_CATEGORIES=1. COMPREHENSIVE CODE ANALYSIS, 2. CRITICAL BUG DETECTION, 3. CODE QUALITY ASSESSMENT, 4. PERFORMANCE OPTIMIZATION, 5. SECURITY VULNERABILITY ASSESSMENT, 6. SCALABILITY AND ARCHITECTURE, 7. ERROR HANDLING AND RESILIENCE, 8. CODE MODERNIZATION SUGGESTIONS, 9. COMPLIANCE AND STANDARDS, 10. CONCLUSIVE RECOMMENDATION" >> .env
    
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests flask flask-cors python-dotenv google-cloud-aiplatform
    
    - name: Set up Backend Server
      run: |
        cd backend
        python main.py &
        sleep 10  # Give time for the server to start
    
    - name: Run Comprehensive Code Review
      run: |
        mkdir -p code-reviews
        python3 - << EOF
        import os
        import requests
        import json
        import re
        import traceback
        from dotenv import load_dotenv

        # Load environment variables
        load_dotenv()

        def is_source_file(path):
            source_extensions = [
                '.py', '.js', '.jsx', '.ts', '.tsx', 
                '.java', '.cpp', '.c', '.rb', '.go', 
                '.php', '.swift', '.kt', '.rs', 
                '.html', '.css', '.scss', '.lua'
            ]
            return any(path.endswith(ext) for ext in source_extensions)

        def sanitize_markdown(text):
            return text.replace('|', '\\|').replace('*', '\\*').replace('_', '\\_')

        def review_code(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    code = f.read()
                
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': f'Bearer {os.getenv("GEMINI_API_KEY")}'
                }
                
                prompt = f"""
                Please review the following code and provide a comprehensive analysis covering:
                1. Code quality and best practices
                2. Potential bugs and issues
                3. Security considerations
                4. Performance optimizations
                5. Architecture and design
                6. Maintainability
                
                Code to review ({os.path.basename(file_path)}):
                
                {code}
                """
                
                payload = {
                    "contents": [{
                        "parts": [{
                            "text": prompt
                        }]
                    }],
                    "generationConfig": {
                        "temperature": 0.7,
                        "topK": 40,
                        "topP": 0.95,
                        "maxOutputTokens": 2048,
                    }
                }
                
                response = requests.post(
                    os.getenv('GEMINI_API_URL'),
                    headers=headers,
                    json=payload,
                    timeout=300
                )
                
                if response.status_code == 200:
                    review_text = response.json()['candidates'][0]['content']['parts'][0]['text']
                    return {
                        'fileName': os.path.basename(file_path),
                        'reviewResults': {
                            'comprehensive_review': review_text
                        }
                    }
                else:
                    print(f"Error reviewing {file_path}: {response.text}")
                    return None
            except Exception as e:
                print(f"Exception reviewing {file_path}: {traceback.format_exc()}")
                return None

        def generate_markdown_report(reviews):
            review_categories = os.getenv('REVIEW_CATEGORIES', '').split(', ')
            
            markdown = "# ðŸ¤– Comprehensive AI Code Review Report\n\n"
            markdown += "## Overview\n\n"
            
            successful_reviews = [r for r in reviews if r]
            markdown += f"**Total Files Reviewed:** {len(successful_reviews)}\n\n"
            
            markdown += "## Detailed Reviews\n\n"
            
            for file_review in successful_reviews:
                filename = file_review.get('fileName', 'Unknown File')
                markdown += f"### File: `{filename}`\n\n"
                
                review_results = file_review.get('reviewResults', {})
                comprehensive_review = review_results.get('comprehensive_review', '')
                
                markdown += "#### Comprehensive Review\n\n"
                markdown += f"```markdown\n{sanitize_markdown(comprehensive_review)}\n```\n\n"
            
            return markdown

        EXCLUDE_DIRS = [
            '.git', 'node_modules', 'dist', 'build', 
            'venv', '.venv', 'env', '.env', 
            'coverage', 'logs', '__pycache__'
        ]

        def should_exclude(path):
            return any(exclude in path.split(os.path.sep) for exclude in EXCLUDE_DIRS)

        # Recursively find and review source code files
        reviews = []
        for root, _, files in os.walk('.'):
            for file in files:
                full_path = os.path.join(root, file)
                
                if should_exclude(full_path) or not is_source_file(full_path):
                    continue
                
                print(f"Reviewing: {full_path}")
                review = review_code(full_path)
                if review:
                    reviews.append(review)

        # Generate comprehensive markdown report
        if reviews:
            report = generate_markdown_report(reviews)
            
            with open('code-reviews/comprehensive_review.md', 'w', encoding='utf-8') as f:
                f.write(report)
        
        if not reviews:
            print("No source code files found or reviewed.")
        EOF
    
    - name: Commit Review Results
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add code-reviews/comprehensive_review.md || true
        git commit -m "Add AI Code Review Report" || true
        git push || true
